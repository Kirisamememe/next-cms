generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  password      String?
  role          Role      @default(VIEWER)
  image         String?
  email         String    @unique
  emailVerified DateTime?
  nickname      String?
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt @map("updated_at")

  allowed_email AllowedEmail?

  jsonAtoms          JsonAtom[]
  jsonContents       JsonContent[] @relation("Author")
  editedJsonContents JsonContent[] @relation("LastEditor")
  articles           Article[]     @relation("ArticleAuthor")
  editedArticles     Article[]     @relation("ArticleEditor")
  articleAtom        ArticleAtom[]

  sessions       Session[]
  accounts       Account[]
  apis           Api[]         @relation("ApiAuthor")
  editedApis     Api[]         @relation("ApiEditor")
  accessToken    AccessToken[]
  uploadedImages ImageUrl[]    @relation("ImageUploader")
  editedImages   ImageUrl[]    @relation("ImageEditor")

  contentGroups       ContentGroup[] @relation("ContentGroupAuthor")
  editedContentGroups ContentGroup[] @relation("ContentGroupEditor")

  @@map("user")
}

model AllowedEmail {
  id     Int    @id @default(autoincrement())
  email  String @unique
  userId Int?   @unique @map("user_id")
  user   User?  @relation(fields: [userId], references: [id])

  @@map("allowed_email")
}

model Account {
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model Session {
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}

model JsonContent {
  id              Int     @id @default(autoincrement())
  slug            String? @unique
  authorNote      String? @map("author_note")
  adminOnly       Boolean @default(false) @map("admin_only")
  permissionLevel Int     @default(3) @map("permission_level")

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  publishedAt DateTime? @map("published_at")
  archivedAt  DateTime? @map("archived_at")

  authorId     Int  @map("author_id")
  author       User @relation("Author", fields: [authorId], references: [id])
  lastEditorId Int  @map("last_editor_id")
  lastEditor   User @relation("LastEditor", fields: [lastEditorId], references: [id])

  categoryId Int?                 @map("category_id")
  category   JsonContentCategory? @relation(fields: [categoryId], references: [id])

  jsonAtoms     JsonAtom[]
  tags          JsonContentTagJunction[]
  contentGroups ContentGroup[]

  @@map("json_content")
}

model JsonAtom {
  id          Int     @id @default(autoincrement())
  title       String?
  description String?
  content     Json

  version Int @default(1000)

  createdAt  DateTime  @default(now()) @map("created_at")
  selectedAt DateTime? @default(now()) @map("selected_at")

  authorId      Int         @map("author_id")
  author        User        @relation(fields: [authorId], references: [id])
  jsonContentId Int         @map("json_content_id")
  jsonContent   JsonContent @relation(fields: [jsonContentId], references: [id])

  @@map("json_atom")
}

model ArticleAtom {
  id        Int     @id @default(autoincrement())
  title     String?
  summary   String?
  body      String
  image     String?
  commitMsg String? @map("commit_msg")
  version   Int     @default(1000)

  createdAt  DateTime  @default(now()) @map("created_at")
  selectedAt DateTime? @default(now()) @map("selected_at")

  authorId  Int     @map("author_id")
  articleId Int     @map("article_id")
  article   Article @relation(fields: [articleId], references: [id])
  author    User    @relation(fields: [authorId], references: [id])

  @@unique([articleId, version])
  @@map("article_atom")
}

model Article {
  id              Int     @id @default(autoincrement())
  slug            String  @unique
  authorNote      String? @map("author_note")
  adminOnly       Boolean @default(false) @map("admin_only")
  permissionLevel Int     @default(3) @map("permission_level")

  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  archivedAt  DateTime? @map("archived_at")
  publishedAt DateTime? @map("published_at")

  authorId     Int              @map("author_id")
  lastEditedBy Int              @map("last_edited_by")
  categoryId   Int?             @map("category_id")
  author       User             @relation("ArticleAuthor", fields: [authorId], references: [id])
  lastEdited   User             @relation("ArticleEditor", fields: [lastEditedBy], references: [id])
  category     ArticleCategory? @relation(fields: [categoryId], references: [id])

  contentGroups ContentGroup[]
  tags          ArticleTagJunction[]
  atoms         ArticleAtom[]

  @@map("article")
}

model MediaFolder {
  path String @id
  name String

  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  archivedAt DateTime? @map("archived_at")

  parentPath String?      @map("parent_path")
  parent     MediaFolder? @relation("FolderToFolder", fields: [parentPath], references: [path], onUpdate: Cascade)

  children      MediaFolder[]  @relation("FolderToFolder")
  images        ImageUrl[]
  contentGroups ContentGroup[]

  @@unique([name, path])
  @@map("media_folder")
}

model ImageUrl {
  id   Int    @id @default(autoincrement())
  name String
  url  String @unique

  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime  @updatedAt @map("updated_at")
  archivedAt DateTime? @map("archived_at")

  folderPath String      @default(".") @map("folder_path")
  folder     MediaFolder @relation(fields: [folderPath], references: [path], onUpdate: Cascade)

  authorId Int  @map("author_id")
  author   User @relation("ImageUploader", fields: [authorId], references: [id])

  lastEditedBy Int  @map("last_edited_by")
  lastEdited   User @relation("ImageEditor", fields: [lastEditedBy], references: [id])

  contentGroups ContentGroup[]

  @@map("image_url")
}

model ArticleCategory {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  articles Article[]

  @@map("article_category")
}

model JsonContentCategory {
  id   Int    @id @default(autoincrement())
  name String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  jsonContents JsonContent[]

  @@map("json_content_category")
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String

  articles     ArticleTagJunction[]
  jsonContents JsonContentTagJunction[]

  @@index([name])
  @@map("tag")
}

model ArticleTagJunction {
  articleId Int     @map("article_id")
  tagId     Int     @map("tag_id")
  article   Article @relation(fields: [articleId], references: [id])
  tag       Tag     @relation(fields: [tagId], references: [id])

  @@id([articleId, tagId])
  @@map("article_tag_junction")
}

model JsonContentTagJunction {
  jsonContentId Int         @map("json_content_id")
  tagId         Int         @map("tag_id")
  jsonContent   JsonContent @relation(fields: [jsonContentId], references: [id])
  tag           Tag         @relation(fields: [tagId], references: [id])

  @@id([jsonContentId, tagId])
  @@map("json_content_tag_junction")
}

model Collection {
  id   Int    @id @default(autoincrement())
  name String

  apiId Int? @map("api_id")
  api   Api? @relation(fields: [apiId], references: [id])

  @@map("collection")
}

model ContentGroup {
  id              Int    @id @default(autoincrement())
  name            String @unique
  description     String
  permissionLevel Int    @default(3) @map("permission_level")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  authorId     Int  @map("author_id")
  author       User @relation("ContentGroupAuthor", fields: [authorId], references: [id])
  lastEditorId Int  @map("last_editor_id")
  lastEditor   User @relation("ContentGroupEditor", fields: [lastEditorId], references: [id])

  articles     Article[]
  jsonContents JsonContent[]
  images       ImageUrl[]
  mediaFolders MediaFolder[]

  @@map("content_group")
}

model Api {
  id   Int     @id @default(autoincrement())
  name String  @unique
  path String  @unique
  key  String? @unique

  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @updatedAt @map("updated_at")
  lastAccessedAt DateTime? @map("last_accessed_at")
  activatedAt    DateTime? @map("activated_at")

  allowedOrigins String? @map("allowed_origins")

  authorId     Int
  author       User @relation("ApiAuthor", fields: [authorId], references: [id])
  lastEditorId Int
  lastEditor   User @relation("ApiEditor", fields: [lastEditorId], references: [id])

  collections Collection[]

  @@map("api")
}

model AccessToken {
  token String @id
  name  String @default("AccessToken")

  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  authorId Int
  author   User @relation(fields: [authorId], references: [id])

  @@map("access_token")
}

enum ValueType {
  TEXT
  NUMBER
  IMAGE
}

enum Role {
  ADMIN
  INSPECTOR
  EDITOR
  VIEWER
  BLOCKED
  SUPER_ADMIN
}

enum Locale {
  EN
  JA
  ZH_CN
  ZH_TW
  KO
  VI
  FR
  ES
  PT
  DE
  RU
  IT
}
